
import rpyc

# connect and import libraries
host_name = 'localhost' #For operating between multiple machines, change host_name to the IP Address or computer name of the host machine
host_port = 18867
conn = rpyc.connect(host_name, host_port)
niswitch = conn.root.NISwitch
argparse = conn.root.argparse
sys = conn.root.sys


def example(resource_name, channel1, channel2, topology, simulate):
    # if we are simulating resource name must be blank
    resource_name = '' if simulate else resource_name

    with niswitch.Session(resource_name=resource_name, topology=topology, simulate=simulate) as session:
        session.connect(channel1=channel1, channel2=channel2)
        print('Channel ', channel1, ' and ', channel2, ' are now connected.')
        session.disconnect(channel1=channel1, channel2=channel2)
        print('Channel ', channel1, ' and ', channel2, ' are now disconnected.')


def _main(argsv):
    parser = argparse.ArgumentParser(description='Performs a connection with NI-SWITCH Channels.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-n', '--resource-name', default='PXI1Slot4', help='Resource name of a National Instruments Switch.')
    parser.add_argument('-ch1', '--channel1', default='ch0', help='Channel One.')
    parser.add_argument('-ch2', '--channel2', default='dut0', help='Channel Two.')
    parser.add_argument('-t', '--topology', default='Configured Topology', help='Topology.')
    parser.add_argument('-s', '--simulate', default=False, action='store_true', help='Simulate device.')
    args = parser.parse_args(argsv)
    example(args.resource_name, args.channel1, args.channel2, args.topology, args.simulate)


def test_example():
    example('', 'ch0', 'dut0', '2514/Independent', True)


def test_main():
    cmd_line = ['--topology', '2737/2-Wire 4x64 Matrix', '--simulate']
    _main(cmd_line)


def main():
    _main(sys.argv[1:])


try:
    if __name__ == '__main__':
        main()
finally:
    # close sessions and connection to server
    conn.close()
